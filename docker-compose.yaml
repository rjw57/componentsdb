services:
  ########## DATABASES AND DATABASE TOOLING ##########

  # A postgres database instance which contains both the components database alongside the testing
  # database. Databases and users are configured in ./compose/db/docker-entrypoint-initdb.d/.
  db:
    profiles:
      - dev
      - prod
      - tool
      - test
    image: &db-image postgres:16
    environment:
      POSTGRES_PASSWORD: postgres-pass
    healthcheck:
      test:
        - CMD
        - pg_isready
        - --dbname
        - postgresql://components-user:components-pass@db:5432/components?sslmode=disable
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 120s
      start_interval: 1s
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./compose/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  # psql command line tool running in the persisted database. Has the project root mounted
  # read-write under /workspace which is also the working directory.
  psql:
    profiles:
      - tool
    image: *db-image
    entrypoint:
      - "psql"
      - "--dbname"
      - postgresql://postgres:postgres-pass@db:5432/components?sslmode=disable
    working_dir: /workspace
    volumes:
      - ./:/workspace
    depends_on:
      db:
        condition: service_healthy

  # Run the alembic migration tool
  alembic:
    profiles:
      - tool
    build:
      dockerfile_inline: |
        FROM python:3.12
        RUN pip install alembic~=1.13 asyncpg==0.29 black~=23.1
    environment:
      ALEMBIC_SQLALCHEMY_URL: postgresql+asyncpg://postgres:postgres-pass@db/components
    entrypoint: ["alembic"]
    working_dir: /workspace/backend
    volumes:
      - ./:/workspace
    depends_on:
      db:
        condition: service_healthy

  ########## SUPPORT SERVICES ##########

  # Run database migrations
  db-migrate:
    extends:
      service: alembic
    profiles:
      - dev
      - prod
      - tool
    command: ["upgrade", "head"]

  ########## TEST SUITE ##########

  backend-test:
    profiles:
      - test
    build:
      dockerfile_inline: |
        FROM python:3.12
        WORKDIR /usr/src/app/
        RUN pip install poetry
        COPY poetry.lock pyproject.toml /usr/src/app/
        RUN poetry install
      context: ./backend
    entrypoint: ["poetry", "run", "poe", "test"]
    volumes:
      - ./backend:/usr/src/app
    environment:
      TESTING_DB_URL: postgresql+asyncpg://postgres:postgres-pass@db/test
    depends_on:
      db:
        condition: service_healthy

  ########## LOCAL APP DEVELOPMENT ##########

  backend-cli:
    profiles:
      - tool
    build:
      dockerfile_inline: |
        FROM python:3.12
        WORKDIR /usr/src/app/
        RUN pip install poetry~=1.8
        COPY poetry.lock pyproject.toml /usr/src/app/
        RUN poetry install --no-root
        ENTRYPOINT ["poetry", "run", "python", "-m", "componentsdb.cli"]
        EXPOSE 8000
      context: ./backend
    volumes:
      - ./backend:/usr/src/app:ro
    environment: &backend-env
      SQLALCHEMY_DB_URL: postgresql+asyncpg://components-user:components-pass@db/components
      ACCESS_TOKEN_LIFETIME: "120"  # a short period so we stress-test refresh logic
      FEDERATED_IDENTITY_PROVIDERS: |
        {
          "google": {
            "audience": "372542478003-8qf97m4bina5uscsiqtfu63602qkrfjd.apps.googleusercontent.com",
            "issuer": "https://accounts.google.com"
          },
          "gcloud-cli": {
            "audience": "32555940559.apps.googleusercontent.com",
            "issuer": "https://accounts.google.com"
          }
        }
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully

  backend-dev:
    profiles:
      - dev
    extends: backend-cli
    command: ["server", "dev", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/healthy"]
      interval: 30s
      retries: 5
      start_period: 120s
      start_interval: 1s

  frontend-dev:
    profiles:
      - dev
    build:
      dockerfile_inline: |
        # syntax=docker/dockerfile:1.7-labs
        FROM node:22
        WORKDIR /usr/src/app
        COPY --exclude=src . .
        RUN yarn install
        ENTRYPOINT ["yarn"]
      context: ./frontend/
    command: ["start", "--host", "0.0.0.0", "--port", "3000"]
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/healthy"]
      interval: 30s
      retries: 5
      start_period: 120s
      start_interval: 1s
    ports:
      - 3001:3000
    volumes:
      - ./frontend/src:/usr/src/app/src:ro

  traefik-dev:
    profiles:
      - dev
    image: traefik:v3.1
    ports:
      - 3000:80
      - 8080:8080
    healthcheck: &traefik-healthcheck
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      retries: 5
      start_period: 120s
      start_interval: 1s
    volumes:
      - ./compose/traefik-config/dev.yaml:/etc/traefik/traefik.yaml:ro
    depends_on:
      frontend-dev:
        condition: service_healthy
      backend-dev:
        condition: service_healthy

  ########## PRODUCTION-LIKE ENCIRONMENT ##########

  backend-prod:
    profiles:
      - prod
    build:
      dockerfile: Dockerfile
      context: ./backend
    command: ["server", "run", "--host", "0.0.0.0", "--port", "8000"]
    environment: *backend-env
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/healthy"]
      interval: 30s
      retries: 5
      start_period: 120s
      start_interval: 1s
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully

  frontend-prod:
    profiles:
      - prod
    build:
      dockerfile: Dockerfile
      context: ./frontend
      target: server
    ports:
      - 3001:80
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/healthy"]
      interval: 30s
      retries: 5
      start_period: 120s
      start_interval: 1s

  traefik-prod:
    profiles:
      - prod
    image: traefik:v3.1
    ports:
      - 3000:80
    volumes:
      - ./compose/traefik-config/prod.yaml:/etc/traefik/traefik.yaml:ro
    healthcheck: *traefik-healthcheck
    depends_on:
      frontend-prod:
        condition: service_healthy
      backend-prod:
        condition: service_healthy

  ########## UTILITIES ##########

  generate-graphql-schema:
    profiles:
      - tool
    build:
      dockerfile_inline: |
        FROM python:3.12
        WORKDIR /usr/src/app/backend
        RUN pip install poetry
        COPY poetry.lock pyproject.toml /usr/src/app/backend
        RUN poetry install
      context: ./backend
    entrypoint: ["poetry", "run"]
    command:
      [
        "strawberry",
        "export-schema",
        "componentsdb.graphql:schema",
        "--output",
        "/usr/src/app/frontend/schema.gql",
      ]
    volumes:
      - ./:/usr/src/app

volumes:
  db-data:
