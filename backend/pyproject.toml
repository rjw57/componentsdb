[tool.poetry]
name = "componentsdb"
version = "0.1.0"
description = "A web application implementing an electronic components database"
authors = ["Rich Wareham <rich.componentsdb@richwareham.com>"]
readme = "../README.md"
packages = [{include = "componentsdb"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.1"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.31"}
uvicorn = "^0.30.1"
structlog = "^24.4.0"
asyncpg = "^0.29.0"
faker = "^26.0.0"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
alembic = "^1.13.2"
poethepoet = "^0.27.0"
pytest-cov = "^5.0.0"
coverage = "^7.6.0"
better-exceptions = "^0.3.3"
pytest-docker-tools = "^3.1.3"
pytest-asyncio = "^0.23.8"
faker = "^26.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks."test"]
help = "Run the default test suite"
sequence = ["pytest"]

[tool.poe.tasks."pytest"]
help = "Run the pytest test suite"
cmd = "pytest"

[tool.pytest.ini_options]
addopts = "--cov --cov-report html"

[tool.coverage.run]
branch = true
source = ["componentsdb"]

[tool.black]
line-length = 99

[tool.isort]
profile = "black"

[tool.mypy]
ignore_missing_imports = true

[tool.datamodel-codegen]
input = "../openapi/spec.yaml"
input-file-type = "openapi"
output = "componentsdb/api/models.py"
output-model-type = "pydantic_v2.BaseModel"
use-annotated = true
field-constraints = true
snake-case-field = true
target-python-version = "3.12"
use-double-quotes = true
disable-timestamp = true
