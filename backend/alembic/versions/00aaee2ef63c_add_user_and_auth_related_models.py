"""add_user_and_auth_related_models

Revision ID: 00aaee2ef63c
Revises: 4948453f7433
Create Date: 2024-07-27 15:39:18.115497

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "00aaee2ef63c"
down_revision: Union[str, None] = "4948453f7433"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("uuid", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("email_verified", sa.Boolean(), server_default="f", nullable=False),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("avatar_url", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_users_uuid", "users", ["uuid"], unique=False)
    op.create_table(
        "access_tokens",
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_table(
        "federated_user_credentials",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("uuid", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("subject", sa.String(), nullable=False),
        sa.Column("audience", sa.String(), nullable=False),
        sa.Column("issuer", sa.String(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "most_recent_claims",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("json_build_object()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_federated_user_credentials_user",
        "federated_user_credentials",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "idx_federated_user_credentials_subject_audience_issuer",
        "federated_user_credentials",
        ["subject", "audience", "issuer"],
        unique=True,
    )
    # ### end Alembic commands ###
    op.execute(
        """
        CREATE TRIGGER update_users_updated_at_trigger
            BEFORE UPDATE ON users
            FOR EACH ROW EXECUTE PROCEDURE update_updated_at_col()
        ;
        """
    )
    op.execute(
        """
        CREATE TRIGGER update_access_tokens_updated_at_trigger
            BEFORE UPDATE ON access_tokens
            FOR EACH ROW EXECUTE PROCEDURE update_updated_at_col()
        ;
        """
    )
    op.execute(
        """
        CREATE TRIGGER update_federated_user_credentials_updated_at_trigger
            BEFORE UPDATE ON federated_user_credentials
            FOR EACH ROW EXECUTE PROCEDURE update_updated_at_col()
        ;
        """
    )


def downgrade() -> None:
    op.execute(
        """
            DROP TRIGGER update_federated_user_credentials_updated_at_trigger
            ON federated_user_credentials;
        """
    )
    op.execute("DROP TRIGGER update_access_tokens_updated_at_trigger ON access_tokens;")
    op.execute("DROP TRIGGER update_users_updated_at_trigger ON users;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_federated_user_credentials_subject_audience_issuer",
        table_name="federated_user_credentials",
    )
    op.drop_index("idx_federated_user_credentials_user", table_name="federated_user_credentials")
    op.drop_table("federated_user_credentials")
    op.drop_table("access_tokens")
    op.drop_index("idx_users_uuid", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
